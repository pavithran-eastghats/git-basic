AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates an APIGateway that is SCIM compliant to interface with SCIM AD
  sync for Amazon Connect auto provisioning of agents. The output is the API
  tenant URL to use in SCIM configuration. Creates API GW and Lambda function.
  
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "SCIM Configuration on AWS"
        Parameters:
          - AmazonConnectInstanceId
          - APIKey

    ParameterLabels:
      AmazonConnectInstanceId:
        default: "Enter your Amazon Connect Instance Id (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)"
      APIKey:
        default: "Enter Secret API Key used for Authorization"

Parameters:
  AmazonConnectInstanceId:
    Type: String
    AllowedPattern: ^([0-9a-f]){8}-([0-9a-f]){4}-([0-9a-f]){4}-([0-9a-f]){4}-([0-9a-f]){12}$
  APIKey:
    NoEcho: true
    Type: String

Mappings:
  RegionMap:
    us-west-2:
      S3Bucket: aconnect-proserve-blogs

Outputs:
  SCIMProvisioningTenantURL:
    Description: "URL to enter in SCIM 'Tenant URL' property"
    Value: !Join
      - ''
      - - 'https://'
        - !Ref AzSCIMProvisioningAPIGW
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /
        - !Ref SCIMAPIStage
  OutputAuthorizerUri:
    Description: "uri for authorizer"
    Value: !Join 
      - ''
      - - "arn:"
        - Ref: AWS::Partition
        - ":apigateway:"
        - !Ref 'AWS::Region'
        - ':lambda:path/2015-03-31/functions/'
        - !GetAtt SCIMAuthorizerLambda.Arn
        - /invocations

Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt "CopyZipsFunction.Arn"
      DestBucket: !Ref "LambdaZipsBucket"
      SourceBucket: !FindInMap [RegionMap, "us-west-2", S3Bucket]
      Prefix: ""
      Objects:
        - SCIMUserProvisioning/SCIM-ProvisioningLambda1.zip
        - SCIMUserProvisioning/SCIM-AuthorizerLambda1.zip

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/*"

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt "CopyZipsRole.Arn"
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import urllib3
          import cfnresponse

          def copy_objects(source_bucket, dest_bucket, prefix, objects):
            s3 = boto3.client('s3')
            for o in objects:
                key = prefix + o
                print(('source bucket: %s' % source_bucket))
                print(('dest_bucket = %s'%dest_bucket))
                print(('key = %s' %key))
                http = urllib3.PoolManager()
                resp = http.request("GET",'https://{source}.s3.amazonaws.com/{object}'.format(source=source_bucket, object=o))
                print(resp.status)
                s3.put_object(Bucket=dest_bucket, Key=key, Body=resp.data)

          def delete_objects(bucket, prefix, objects):
            s3 = boto3.client('s3')
            objects = {'Objects': [{'Key': prefix + o} for o in objects]}
            s3.delete_objects(Bucket=bucket, Delete=objects)

          def timeout(event, context):
            logging.error('Execution is about to time out, sending failure response to CloudFormation')
            cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)

          def lambda_handler(event, context):
            timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
            timer.start()
            print(('Received event: %s' % json.dumps(event)))
            status = cfnresponse.SUCCESS
            try:
                source_bucket = event['ResourceProperties']['SourceBucket']
                dest_bucket = event['ResourceProperties']['DestBucket']
                prefix = event['ResourceProperties']['Prefix']
                objects = event['ResourceProperties']['Objects']
                if event['RequestType'] == 'Delete':
                    delete_objects(dest_bucket, prefix, objects)
                else:
                    copy_objects(source_bucket, dest_bucket, prefix, objects)
            except Exception as e:
                logging.error('Exception: %s' % e, exc_info=True)
                status = cfnresponse.FAILED
            finally:
                timer.cancel()
                cfnresponse.send(event, context, status, {}, None)
                print('done')

  SCIMProvisioningLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Provisioninglambda'
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt SCIMProvisioningLambdaExecutionRole.Arn
      Description: AWS Lambda function for SCIM user provisioning
      Environment:
        Variables:
          INSTANCE_ID: !Ref AmazonConnectInstanceId
          ROUTING_PROFILE: "Basic Routing Profile"
          SECURITY_PROFILE: "Agent"
          REGION: !Ref 'AWS::Region'
          MAX_LIST_USERS: 250
      Code: 
        S3Bucket: !Ref "LambdaZipsBucket"
        S3Key: "SCIMUserProvisioning/SCIM-ProvisioningLambda1.zip"
    DependsOn:
      - SCIMProvisioningLambdaExecutionRole

  SCIMAuthorizerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Authorizerlambda'
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt SCIMAuthorizerLambdaExecutionRole.Arn
      Description: AWS Lambda Authorizer for SCIM user provisioning
      Environment:
        Variables:
          REGION: !Ref 'AWS::Region'
          MAX_LIST_USERS: 250
      Code: 
        S3Bucket: !Ref "LambdaZipsBucket"
        S3Key: "SCIMUserProvisioning/SCIM-AuthorizerLambda1.zip"
    DependsOn:
      - SCIMAuthorizerLambdaExecutionRole

  SCIMAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties: 
      AuthorizerUri: !Join 
        - ''
        - - "arn:"
          - Ref: AWS::Partition
          - ":apigateway:"
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt
            - SCIMAuthorizerLambda
            - Arn
          - /invocations
      IdentitySource: method.request.header.Authorization
      Name: !Sub '${AWS::StackName}-SCIMAuthorizer'
      RestApiId: !Ref AzSCIMProvisioningAPIGW
      Type: TOKEN

  SCIMAPIProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - AzSCIMProvisioningAPIGW
          - RootResourceId
      PathPart: "{Users+}"
      RestApiId:
        Ref: AzSCIMProvisioningAPIGW

  SCIMAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        Ref: SCIMAPIProxyResource
      RestApiId:
        Ref: AzSCIMProvisioningAPIGW
      RequestParameters:
        method.request.path.proxy: true
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref SCIMAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !GetAtt SCIMProvisioningLambda.Arn
              - /invocations

  AzSCIMProvisioningAPIGW:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: API GW invoked from SCIM Enterprise application and calls the Lambda function
      EndpointConfiguration:
        Types:
          - EDGE
      Name: !Sub '${AWS::StackName}-apigw'

  SCIMAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: AzSCIMProvisioningAPIGW
      DeploymentId:
        Ref: SCIMProvisioningAPIGWdeployment
      StageName: dev

  SCIMParameterStore:
    Type: AWS::SSM::Parameter
    Properties: 
      Type: StringList
      Name: '/SCIMIntegration/Key'
      Value: !Join
        - ''
        - - 'Bearer ' 
          - !Ref APIKey 
          - ','
          - !Ref APIKey

  SCIMProvisioningAPIGWaccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt
        - SCIMProvisioningAPIGWCloudWatchRole
        - Arn
    DependsOn:
      - AzSCIMProvisioningAPIGW

  SCIMProvisioningAPIGWdeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref AzSCIMProvisioningAPIGW
      Description: Automatically created by the RestApi construct
    DependsOn:
      - SCIMAPIMethod
      - SCIMAPIProxyResource

  SCIMProvisioningAPIGWUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref AzSCIMProvisioningAPIGW
          Stage: !Ref SCIMAPIStage
      Description: SCIM API GW usage plan
      Quota:
        Limit: 5000
        Period: DAY
      Throttle:
        BurstLimit: 1000
        RateLimit: 500
      UsagePlanName: !Sub '${AWS::StackName}-usageplan'

  SCIMProvisioningAPIGWAnyAPIPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt SCIMProvisioningLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref AzSCIMProvisioningAPIGW
          - /
          - !Ref SCIMAPIStage
          - /*/*

  SCIMAuthPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SCIMAuthorizerLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AzSCIMProvisioningAPIGW}/authorizers/${SCIMAuthorizer}"

  SCIMProvisioningLambdaExecutionRole:
    DependsOn: CopyZips
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-ProvisioningRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-ProvisioningPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
                Effect: Allow
              - Action:
                  - 'connect:UpdateUserIdentityInfo'
                  - 'connect:DeleteUser'
                  - 'connect:ListRoutingProfiles'
                  - 'connect:ListUsers'
                  - 'connect:CreateUser'
                  - 'connect:SearchUsers'
                  - 'connect:ListSecurityProfiles'
                Resource: 
                  - !Join
                    - ''
                    - - 'arn:aws:connect:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':instance/'
                      - !Ref AmazonConnectInstanceId
                  - !Join
                    - ''
                    - - 'arn:aws:connect:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':instance/'
                      - !Ref AmazonConnectInstanceId
                      - '/*/*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  SCIMAuthorizerLambdaExecutionRole:
    DependsOn: CopyZips
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-AuthorizerRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-AuthorizerPolicy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
                Effect: Allow
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !Join
                    - ''
                    - - 'arn:aws:logs:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':log-group:/aws/lambda/'
                      - !Sub '${AWS::StackName}-Authorizerlambda'
                      - ':*'
                Effect: Allow
              - Action:
                  - 'cloudwatch:PutMetricData'
                  - 'ds:CreateComputer'
                  - 'ds:DescribeDirectories'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ssm:*'
                  - 'ec2messages:*'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 'iam:CreateServiceLinkedRole'
                  - 'iam:DeleteServiceLinkedRole'
                  - 'iam:GetServiceLinkedRoleDeletionStatus'
                Resource: 'arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*'
                Effect: Allow
              - Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  SCIMProvisioningAPIGWCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
         - Action: 'sts:AssumeRole'
           Effect: Allow
           Principal:
            Service: apigateway.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
